/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";

// This file contains protocol buffers that are used for ReplicationServerStatusProtocol.
package hbase.pb;

option java_package = "org.apache.hadoop.hbase.shaded.protobuf.generated";
option java_outer_classname = "ReplicationServerStatusProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

import "HBase.proto";
import "server/ClusterStatus.proto";
import "server/ErrorHandling.proto";

message ReplicationServerStartupRequest {
  /** Port number this replication server is up on */
  required uint32 port = 1;

  /** This servers' startcode */
  required uint64 server_start_code = 2;

  /** Current time of the replication server in ms */
  required uint64 server_current_time = 3;

  /** hostname for replication server, optional */
  optional string use_this_hostname_instead = 4;
}

message ReplicationServerStartupResponse {
  /**
   * Configuration for the replication server to use: e.g. filesystem,
   * hbase rootdir, the hostname to use creating the ReplicationServer ServerName,
   * etc
   */
  repeated NameStringPair map_entries = 1;
}

message ReplicationServerReportRequest {
  required ServerName server = 1;

  /** load the server is under */
  optional ServerLoad load = 2;
}

message ReplicationServerReportResponse {
}

message ReportReplicationServerFatalErrorRequest {
  /** name of the server experiencing the error */
  required ServerName server = 1;

  /** informative text to expose in the master logs and UI */
  required string error_message = 2;
}

message ReportReplicationServerFatalErrorResponse {
}

service ReplicationServerStatusService {
  /** Called when a replication server first starts. */
  rpc ReplicationServerStartup (ReplicationServerStartupRequest)
    returns (ReplicationServerStartupResponse);

  /** Called to report the load the ReplicationServer is under. */
  rpc ReplicationServerReport (ReplicationServerReportRequest)
    returns (ReplicationServerReportResponse);

  /**
   * Called by a region server to report a fatal error that is causing it to
   * abort.
   */
  rpc ReportReplicationServerFatalError (ReportReplicationServerFatalErrorRequest)
    returns (ReportReplicationServerFatalErrorResponse);
}
